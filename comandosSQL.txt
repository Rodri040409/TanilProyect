// Conseguir datos de login:

DELIMITER //

CREATE FUNCTION validar_login(
    p_username VARCHAR(16), 
    p_password VARCHAR(40), 
    p_store_id TINYINT
) RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE hashed_password VARCHAR(40);
    DECLARE user_count INT;

    -- Obtener el hash de la contraseña ingresada
    SET hashed_password = SHA1(p_password);

    -- Verificar si existe un usuario con esas credenciales en la tienda especificada
    SELECT COUNT(*) INTO user_count
    FROM staff
    WHERE username = p_username 
      AND password = hashed_password
      AND store_id = p_store_id;

    -- Si user_count es 1, las credenciales son correctas, de lo contrario no
    RETURN user_count = 1;
END //

DELIMITER ;


// Conseguir películas (nombre, año y categoría)

DELIMITER //

CREATE FUNCTION obtener_peliculas_por_tienda(p_store_id TINYINT)
RETURNS LONGTEXT
DETERMINISTIC
BEGIN
    DECLARE resultado LONGTEXT DEFAULT '[]';

    SELECT JSON_ARRAYAGG(
        JSON_OBJECT(
            'film_id', f.film_id,
            'titulo', f.title,
            'año', f.release_year,
            'género', c.name
        )
    ) INTO resultado
    FROM film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    WHERE i.store_id = p_store_id
    ORDER BY f.release_year DESC;

    RETURN COALESCE(resultado, '[]');
END //

DELIMITER ;


// Obtener todas las rentas de la tienda

DELIMITER //

CREATE FUNCTION obtener_rentas_por_tienda(p_store_id TINYINT)
RETURNS LONGTEXT
DETERMINISTIC
BEGIN
    DECLARE resultado LONGTEXT DEFAULT '[]';

    SELECT JSON_ARRAYAGG(
        JSON_OBJECT(
            'rental_id', r.rental_id,
            'pelicula', f.title,
            'cliente', CONCAT(c.first_name, ' ', c.last_name),
            'fecha_renta', r.rental_date
        )
    ) INTO resultado
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN customer c ON r.customer_id = c.customer_id
    WHERE i.store_id = p_store_id
    ORDER BY r.rental_date DESC;

    RETURN COALESCE(resultado, '[]');
END //

DELIMITER ;

// Obtener todos los empleados de la tienda

DELIMITER //

CREATE FUNCTION obtener_empleados_por_tienda(p_store_id TINYINT)
RETURNS LONGTEXT
DETERMINISTIC
BEGIN
    DECLARE resultado LONGTEXT DEFAULT '[]';

    SELECT JSON_ARRAYAGG(
        JSON_OBJECT(
            'staff_id', s.staff_id,
            'nombre', CONCAT(s.first_name, ' ', s.last_name),
            'correo', s.email,
            'usuario', s.username
        )
    ) INTO resultado
    FROM staff s
    WHERE s.store_id = p_store_id
    ORDER BY s.first_name;

    RETURN COALESCE(resultado, '[]');
END //

DELIMITER ;

// Comando para eliminar películas

DELIMITER //

CREATE PROCEDURE eliminar_pelicula(IN p_film_id INT, IN p_store_id INT)
BEGIN
    DECLARE rentas_existentes INT;

    -- 1️⃣ Verificar si hay rentas activas en esta tienda
    SELECT COUNT(*) INTO rentas_existentes
    FROM rental
    WHERE inventory_id IN (
        SELECT inventory_id FROM inventory WHERE film_id = p_film_id AND store_id = p_store_id
    );

    IF rentas_existentes > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No se puede eliminar la película porque tiene rentas activas en esta tienda.';
    ELSE
        -- 2️⃣ Eliminar inventario de esta tienda
        DELETE FROM inventory WHERE film_id = p_film_id AND store_id = p_store_id;

        -- 3️⃣ Si ya no hay copias en ninguna tienda, eliminar totalmente
        IF NOT EXISTS (SELECT 1 FROM inventory WHERE film_id = p_film_id) THEN
            DELETE FROM film_category WHERE film_id = p_film_id;
            DELETE FROM film_actor WHERE film_id = p_film_id;
            DELETE FROM film_text WHERE film_id = p_film_id;
            DELETE FROM film WHERE film_id = p_film_id;
        END IF;
    END IF;
END //

DELIMITER ;


// Eliminar una renta

DELIMITER //

CREATE PROCEDURE eliminar_renta(IN p_rental_id INT, IN p_store_id TINYINT)
BEGIN
    -- Eliminar pagos relacionados
    DELETE FROM payment
    WHERE rental_id = p_rental_id;

    -- Eliminar la renta solo si pertenece a esta tienda
    DELETE FROM rental
    WHERE rental_id = p_rental_id
      AND inventory_id IN (
          SELECT inventory_id FROM inventory WHERE store_id = p_store_id
      );
END //

DELIMITER ;

// Eliminar un empleado

DELIMITER //

CREATE PROCEDURE eliminar_empleado(IN p_staff_id TINYINT, IN p_store_id TINYINT)
BEGIN
    -- Eliminar pagos hechos por el empleado
    DELETE FROM payment WHERE staff_id = p_staff_id;

    -- Eliminar rentas gestionadas por el empleado
    DELETE FROM rental WHERE staff_id = p_staff_id;

    -- Eliminar registros de este empleado (solo si es de esta tienda)
    DELETE FROM staff
    WHERE staff_id = p_staff_id AND store_id = p_store_id;
END //

DELIMITER ;

// Obtener todos los datos de las películas:

DELIMITER //

CREATE PROCEDURE obtener_pelicula(IN p_film_id INT)
BEGIN
    SELECT
        f.film_id,
        f.title AS titulo,
        f.description AS descripcion,
        f.release_year AS año,
        l.name AS idioma,
        f.rental_duration AS duracion_renta,
        f.rental_rate AS renta,
        f.length AS duracion,
        f.replacement_cost AS costo_reemplazo,
        f.rating,
        f.special_features AS caracteristicas,
        COUNT(i.inventory_id) AS inventario_total
    FROM film f
    LEFT JOIN language l ON f.language_id = l.language_id
    LEFT JOIN inventory i ON f.film_id = i.film_id
    WHERE f.film_id = p_film_id
    GROUP BY f.film_id;
END //

DELIMITER ;


// Obtener todos los datos de las rentas:

CREATE PROCEDURE obtener_renta(IN p_rental_id INT)
BEGIN
    SELECT 
        r.rental_id,
        r.rental_date,
        r.return_date,
        f.title AS pelicula,
        f.release_year AS año_pelicula,
        c.first_name AS nombre_cliente,
        c.last_name AS apellido_cliente,
        c.email AS email_cliente,
        s.first_name AS empleado_nombre,
        s.last_name AS empleado_apellido,
        s.username AS usuario_empleado,
        st.store_id,
        COALESCE(SUM(p.amount), 0) AS monto_total_pagado
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN customer c ON r.customer_id = c.customer_id
    JOIN staff s ON r.staff_id = s.staff_id
    JOIN store st ON s.store_id = st.store_id
    LEFT JOIN payment p ON r.rental_id = p.rental_id
    WHERE r.rental_id = p_rental_id
    GROUP BY r.rental_id;
END //

DELIMITER ;



// Obtener todos los datos del empleado:

DELIMITER //

CREATE PROCEDURE obtener_empleado(IN p_staff_id INT)
BEGIN
    SELECT 
        s.staff_id,
        s.first_name,
        s.last_name,
        s.username,
        s.email,
        s.active,
        s.store_id,
        s.last_update,
        a.address,
        a.address2,
        a.district,
        c.city,
        co.country,
        a.postal_code,
        a.phone
    FROM staff s
    LEFT JOIN address a ON s.address_id = a.address_id
    LEFT JOIN city c ON a.city_id = c.city_id
    LEFT JOIN country co ON c.country_id = co.country_id
    WHERE s.staff_id = p_staff_id;
END //

DELIMITER ;

// Actualizar películas

DELIMITER //

CREATE FUNCTION actualizar_pelicula(
    p_film_id INT,
    p_titulo TEXT,
    p_año INT,
    p_genero TEXT,
    p_descripcion TEXT,
    p_idioma TEXT,
    p_renta DECIMAL(10,2),
    p_rating TEXT,
    p_duracion_renta INT,
    p_duracion INT,
    p_costo_reemplazo DECIMAL(10,2),
    p_inventario_total INT,
    p_caracteristicas TEXT
)
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    UPDATE pelicula SET
        titulo = IFNULL(p_titulo, titulo),
        año = IFNULL(p_año, año),
        genero = IFNULL(p_genero, genero),
        descripcion = IFNULL(p_descripcion, descripcion),
        idioma = IFNULL(p_idioma, idioma),
        renta = IFNULL(p_renta, renta),
        rating = IFNULL(p_rating, rating),
        duracion_renta = IFNULL(p_duracion_renta, duracion_renta),
        duracion = IFNULL(p_duracion, duracion),
        costo_reemplazo = IFNULL(p_costo_reemplazo, costo_reemplazo),
        inventario_total = IFNULL(p_inventario_total, inventario_total),
        caracteristicas = IFNULL(p_caracteristicas, caracteristicas)
    WHERE film_id = p_film_id;

    RETURN TRUE;
END;
//

DELIMITER ;

// Actualizar rentas

DELIMITER //

CREATE FUNCTION actualizar_renta(
    p_rental_id INT,
    p_rental_date DATETIME,
    p_return_date DATETIME
)
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    UPDATE renta SET
        rental_date = IFNULL(p_rental_date, rental_date),
        return_date = IFNULL(p_return_date, return_date)
    WHERE rental_id = p_rental_id;

    RETURN TRUE;
END;
//

DELIMITER ;

// Actualizar clientes

DELIMITER //

CREATE FUNCTION actualizar_empleado(
    p_staff_id INT,
    p_first_name TEXT,
    p_last_name TEXT,
    p_email TEXT,
    p_username TEXT
)
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    UPDATE empleado SET
        first_name = IFNULL(p_first_name, first_name),
        last_name = IFNULL(p_last_name, last_name),
        email = IFNULL(p_email, email),
        username = IFNULL(p_username, username)
    WHERE staff_id = p_staff_id;

    RETURN TRUE;
END;
//

DELIMITER ;
