// Conseguir datos de login:

DELIMITER //

CREATE FUNCTION validar_login(
    p_username VARCHAR(16), 
    p_password VARCHAR(40), 
    p_store_id TINYINT
) RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE hashed_password VARCHAR(40);
    DECLARE user_count INT;

    -- Obtener el hash de la contrase√±a ingresada
    SET hashed_password = SHA1(p_password);

    -- Verificar si existe un usuario con esas credenciales en la tienda especificada
    SELECT COUNT(*) INTO user_count
    FROM staff
    WHERE username = p_username 
      AND password = hashed_password
      AND store_id = p_store_id;

    -- Si user_count es 1, las credenciales son correctas, de lo contrario no
    RETURN user_count = 1;
END //

DELIMITER ;


// Conseguir pel√≠culas (nombre, a√±o y categor√≠a)

DELIMITER //

CREATE FUNCTION obtener_peliculas_por_tienda(p_store_id TINYINT)
RETURNS LONGTEXT
DETERMINISTIC
BEGIN
    DECLARE resultado LONGTEXT DEFAULT '[]';

    SELECT JSON_ARRAYAGG(
        JSON_OBJECT(
            'film_id', f.film_id,
            'titulo', f.title,
            'a√±o', f.release_year,
            'g√©nero', c.name
        )
    ) INTO resultado
    FROM film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    WHERE i.store_id = p_store_id
    ORDER BY f.release_year DESC;

    RETURN COALESCE(resultado, '[]');
END //

DELIMITER ;


// Obtener todas las rentas de la tienda

DELIMITER //

CREATE FUNCTION obtener_rentas_por_tienda(p_store_id TINYINT)
RETURNS LONGTEXT
DETERMINISTIC
BEGIN
    DECLARE resultado LONGTEXT DEFAULT '[]';

    SELECT JSON_ARRAYAGG(
        JSON_OBJECT(
            'rental_id', r.rental_id,
            'pelicula', f.title,
            'cliente', CONCAT(c.first_name, ' ', c.last_name),
            'fecha_renta', r.rental_date
        )
    ) INTO resultado
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN customer c ON r.customer_id = c.customer_id
    WHERE i.store_id = p_store_id
    ORDER BY r.rental_date DESC;

    RETURN COALESCE(resultado, '[]');
END //

DELIMITER ;

// Obtener todos los empleados de la tienda

DELIMITER //

CREATE FUNCTION obtener_empleados_por_tienda(p_store_id TINYINT)
RETURNS LONGTEXT
DETERMINISTIC
BEGIN
    DECLARE resultado LONGTEXT DEFAULT '[]';

    SELECT JSON_ARRAYAGG(
        JSON_OBJECT(
            'empleado_id', s.staff_id,
            'nombre', CONCAT(s.first_name, ' ', s.last_name),
            'correo', s.email,
            'usuario', s.username
        )
    ) INTO resultado
    FROM staff s
    WHERE s.store_id = p_store_id
    ORDER BY s.first_name;

    RETURN COALESCE(resultado, '[]');
END //

DELIMITER ;

// Comando para eliminar pel√≠culas

DELIMITER //

CREATE PROCEDURE eliminar_pelicula(IN p_film_id INT, IN p_store_id INT)
BEGIN
    DECLARE rentas_existentes INT;

    -- 1Ô∏è‚É£ Verificar si hay rentas activas en esta tienda
    SELECT COUNT(*) INTO rentas_existentes
    FROM rental
    WHERE inventory_id IN (
        SELECT inventory_id FROM inventory WHERE film_id = p_film_id AND store_id = p_store_id
    );

    IF rentas_existentes > 0 THEN
        -- üö® Lanzar error si hay rentas activas
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No se puede eliminar la pel√≠cula porque tiene rentas activas en esta tienda.';
    ELSE
        -- 2Ô∏è‚É£ Eliminar inventario SOLO de esta tienda
        DELETE FROM inventory WHERE film_id = p_film_id AND store_id = p_store_id;

        -- 3Ô∏è‚É£ Verificar si la pel√≠cula sigue en otras tiendas
        IF NOT EXISTS (SELECT 1 FROM inventory WHERE film_id = p_film_id) THEN
            -- 4Ô∏è‚É£ Si no hay m√°s copias en ninguna tienda, eliminar la pel√≠cula completamente
            DELETE FROM film_category WHERE film_id = p_film_id;
            DELETE FROM film WHERE film_id = p_film_id;
        END IF;
    END IF;
END //

DELIMITER ;



// Eliminar una renta

DELIMITER //

CREATE PROCEDURE eliminar_renta(IN p_rental_id INT, IN p_store_id TINYINT)
BEGIN
    -- Eliminar pagos relacionados con la renta
    DELETE FROM payment WHERE rental_id = p_rental_id;

    -- Eliminar la renta asegurando que pertenece a la tienda
    DELETE FROM rental WHERE rental_id = p_rental_id 
    AND inventory_id IN (SELECT inventory_id FROM inventory WHERE store_id = p_store_id);
END //

DELIMITER ;

// Eliminar un empleado

DELIMITER //

CREATE PROCEDURE eliminar_empleado(IN p_staff_id TINYINT, IN p_store_id TINYINT)
BEGIN
    -- Eliminar pagos registrados por el empleado
    DELETE FROM payment WHERE staff_id = p_staff_id;

    -- Eliminar rentas gestionadas por el empleado
    DELETE FROM rental WHERE staff_id = p_staff_id;

    -- Eliminar al empleado, asegurando que pertenece a la tienda
    DELETE FROM staff WHERE staff_id = p_staff_id AND store_id = p_store_id;
END //

DELIMITER ;

// Obtener todos los datos de las pel√≠culas:

DELIMITER //

CREATE PROCEDURE obtener_pelicula(IN p_film_id INT)
BEGIN
    SELECT
        f.film_id, f.title, f.description, f.release_year,
        l.name AS language, f.rental_duration, f.rental_rate,
        f.length, f.replacement_cost, f.rating, f.special_features,
        COUNT(i.inventory_id) AS inventory_count
    FROM film f
    LEFT JOIN language l ON f.language_id = l.language_id
    LEFT JOIN inventory i ON f.film_id = i.film_id
    WHERE f.film_id = p_film_id
    GROUP BY f.film_id;
END //

DELIMITER ;



// Obtener todos los datos de las rentas:

DELIMITER //

CREATE PROCEDURE obtener_renta(IN p_rental_id INT)
BEGIN
    SELECT r.rental_id, f.title AS pelicula, c.first_name AS cliente, r.rental_date
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN customer c ON r.customer_id = c.customer_id
    WHERE r.rental_id = p_rental_id;
END //

DELIMITER ;


// Obtener todos los datos del empleado:

DELIMITER //

CREATE PROCEDURE obtener_empleado(IN p_staff_id INT)
BEGIN
    SELECT staff_id, first_name, last_name, email, username
    FROM staff
    WHERE staff_id = p_staff_id;
END //

DELIMITER ;
